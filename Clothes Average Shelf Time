-- Average Shelf Time
with all_locations as 
(
    select distinct fingerprint, locationId, inventoryStatus, date(dsaEvent.eventDatetime) as date, dsaEvent.eventDatetime,
    lag(locationId) over (partition by fingerprint order by (dsaEvent.eventDatetime)) as last_location, 
    lag(inventoryStatus) over (partition by fingerprint order by (dsaEvent.eventDatetime)) as last_status,
    lag(dsaEvent.eventDatetime) over (partition by fingerprint order by (dsaEvent.eventDatetime)) as last_update
    from  `nuuly_messages.fingerprint_events` 
    where 1=1
    --and fingerprint = '1003893802' 
    order by 5
)
,updates as
(
select fingerprint, locationId, inventoryStatus, eventDatetime 
from all_locations 
where locationId <> last_location or inventoryStatus <> last_status or last_location is null
)
,location_lookup as 
(
    select locationid, locationType, displayname, description, distributionCenter, aisleDisplayName, rowColorDisplayName, levelDisplayName, floorDisplayName
    from `nuuly_lookup_tables.rms_location_lookup`
)
, ranking as
(
select distinct  i.*, displayname, row_number() over(partition by fingerprint order by eventDatetime) as ranking, -- rank only for qa purposes, can remove
lag(inventoryStatus, 1) over (partition by fingerprint order by eventDatetime) as inventory_lag,
lag(locationId, 1) over (partition by fingerprint order by eventDatetime) as locationId_lag,
lag(eventDatetime, 1) over (partition by fingerprint order by eventDatetime) as eventDatetime_lag
from updates i
left join location_lookup using(locationid)
where inventoryStatus = 'AVAILABLE' or inventoryStatus = 'ASSIGNED'
qualify row_number() over(partition by fingerprint, locationId, inventoryStatus order by eventDatetime) =1
order by eventDatetime
)
, shelf_time_per_assigned as
(
select *, date_diff(eventDatetime, eventDatetime_lag, day) as shelf_time
from ranking
where inventoryStatus = 'ASSIGNED' and inventory_lag = 'AVAILABLE' and locationId = locationId_lag
)
select distinct size_group_name, round(avg(shelf_time)) as average_shelf_time --PERCENTILE_CONT(shelf_time, 0.5) OVER (partition by size_group_name) AS median 
 -- Criteria (size_group_name, nuuly_class_name, season)
from shelf_time_per_assigned
left join `nuuly_reporting.inventory` on fingerprint = fingerprint_id
left join `nuuly_reporting.products` using(sku_id)
where date(eventDatetime) >= publish_date
group by 1
order by 2 desc
